Index: src/main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from fastapi import FastAPI\nfrom src.assignments.assignment01.assignment01 import user_router, brand_router, brandAdd_router, brandUpdate_router, brandDelete_router\n\napp = FastAPI()\n\n# Include API routes\napp.include_router(user_router, prefix=\"/user\", tags=[\"user\"])\napp.include_router(brand_router, prefix=\"/story\", tags=[\"story\"])\napp.include_router(brandAdd_router, prefix=\"/brand_create\", tags=[\"brand\"])\napp.include_router(brandUpdate_router, prefix=\"/brand_settings\", tags=[\"\"])\napp.include_router(brandDelete_router,prefix=\"/brand_delete\", tags=[\"\"])\n\n\ndef get_app():\n    return app\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main.py b/src/main.py
--- a/src/main.py	(revision 03701a06a901d9011e28a1c1e70cfa4bf25f9d79)
+++ b/src/main.py	(date 1706789607318)
@@ -1,14 +1,15 @@
 from fastapi import FastAPI
 from src.assignments.assignment01.assignment01 import user_router, brand_router, brandAdd_router, brandUpdate_router, brandDelete_router
+from src.assignments.assignment02.assignment02 import router
 
 app = FastAPI()
 
-# Include API routes
 app.include_router(user_router, prefix="/user", tags=["user"])
 app.include_router(brand_router, prefix="/story", tags=["story"])
 app.include_router(brandAdd_router, prefix="/brand_create", tags=["brand"])
-app.include_router(brandUpdate_router, prefix="/brand_settings", tags=[""])
-app.include_router(brandDelete_router,prefix="/brand_delete", tags=[""])
+app.include_router(brandUpdate_router, prefix="/brand_settings", tags=["brand"])
+app.include_router(brandDelete_router,prefix="/brand_delete", tags=["brand"])
+app.include_router(router)
 
 
 def get_app():
Index: src/database.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\nimport urllib.parse as up\n\nBase = declarative_base()\n\n# Replace the connection string with your MySQL connection details\nDATABASE_URL = f\"mysql+mysqlconnector://root:{str(up.quote('Harsh@15'))}@localhost/zenarate_db\"\nengine = create_engine(DATABASE_URL)\n\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\n\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/database.py b/src/database.py
--- a/src/database.py	(revision 03701a06a901d9011e28a1c1e70cfa4bf25f9d79)
+++ b/src/database.py	(date 1706784735046)
@@ -2,11 +2,21 @@
 from sqlalchemy.ext.declarative import declarative_base
 from sqlalchemy.orm import sessionmaker
 import urllib.parse as up
+from dotenv import load_dotenv
+import os
 
+load_dotenv()
 Base = declarative_base()
 
-# Replace the connection string with your MySQL connection details
-DATABASE_URL = f"mysql+mysqlconnector://root:{str(up.quote('Harsh@15'))}@localhost/zenarate_db"
+DB_USERNAME = os.getenv("DB_USERNAME")
+DB_PASSWORD = os.getenv("DB_PASSWORD")
+DB_HOST = os.getenv("DB_HOST")
+DB_NAME = os.getenv("DB_NAME")
+DB_PASSWORD = str(up.quote(DB_PASSWORD))
+
+DATABASE_URL = f"mysql+mysqlconnector://{DB_USERNAME}:{DB_PASSWORD}@{DB_HOST}/{DB_NAME}"
+
+# DATABASE_URL = f"mysql+mysqlconnector://root:{str(up.quote('Harsh@15'))}@localhost/zenarate_db"
 engine = create_engine(DATABASE_URL)
 
 SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Index: src/model.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from sqlalchemy import Column, String, DateTime, Float, Text, ForeignKey, LargeBinary, text, Integer, Boolean, func\nfrom src.database import Base\nfrom sqlalchemy.dialects.mysql import INTEGER, TINYINT, TIMESTAMP\n\n\nclass BrandSettings(Base):\n    __tablename__ = 'brand_settings'\n\n    id = Column(Integer, primary_key=True, index=True)\n    brand_id = Column(Integer, index=True)\n    settings_json = Column(Text, nullable=False)\n    inactive_settings = Column(Boolean, default=False)\n    created_by = Column(Integer, index=True)\n    created_time = Column(TIMESTAMP, server_default='CURRENT_TIMESTAMP', onupdate='CURRENT_TIMESTAMP')\n\n\nclass Story(Base):\n    __tablename__ = 'story'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    title = Column(String(255), nullable=True)\n    summary = Column(Text)\n    guide_id = Column(Integer, ForeignKey('video.id', ondelete='SET NULL', onupdate='CASCADE'))\n    owner_id = Column(Integer, ForeignKey('user.id', ondelete='CASCADE', onupdate='CASCADE'), nullable=False)\n    categoryID = Column(Integer, nullable=True)\n    inactive = Column(Boolean, nullable=False, default=False)\n    created_time = Column(DateTime, nullable=True)\n    background = Column(Text)\n    description = Column(Text)\n    isPrivate = Column(Boolean, nullable=False, default=True)\n    story_type = Column(Integer, default=1, comment='1 = Video, 2 = ScreenShare, 3 = Audio, 4 = Chat')\n    approvalpreferred = Column(Boolean, default=False)\n    purpose = Column(String(255), nullable=True)\n    timing = Column(String(255), nullable=True)\n    distribution = Column(String(255), nullable=True)\n    promotedToTeam = Column(Boolean, default=False)\n    recording = Column(Boolean, nullable=False, default=False, comment='0 = Standard, 1 = Interactive')\n    difficulty = Column(Integer, nullable=False, default=0,\n                        comment='0 = General, 1= Low/Easy, 2= Medium, 3 = Hard/High')\n    interactive_pattern = Column(Integer, nullable=False, default=2, comment='0 = General, 1 = Inbound, 2 = Outbound')\n    interactive_format = Column(Integer, default=1, comment='1 = Guided, 2 = Unguided')\n    compliance = Column(Boolean, nullable=False, default=False, comment='0-No , 1- Yes')\n    ai_version = Column(Integer, nullable=True)\n    rule_engine = Column(String(255), default='1.0', comment='Default is 1.0 and new is 1.1')\n    coaching = Column(String(255), default='1.0', comment='Default is 1.0')\n    user_workbench_version = Column(String(10), nullable=False, default='v1',\n                                    comment='Specifies version of user workbench enabled for this story')\n\n\nclass Brand(Base):\n    __tablename__ = 'brand'\n\n    id = Column(Integer, primary_key=True, index=True, autoincrement=True)\n    name = Column(String(255), index=True, nullable=False)\n    inactive = Column(Boolean, default=False, nullable=False)\n    created_by = Column(Integer, default=0)\n    created_time = Column(TIMESTAMP, server_default=func.current_timestamp(), nullable=False)\n    updated_by = Column(Integer, default=0)\n    last_updated_at = Column(\n        TIMESTAMP,\n        server_default=func.current_timestamp(),\n        onupdate=func.current_timestamp(),\n        nullable=True\n    )\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/model.py b/src/model.py
--- a/src/model.py	(revision 03701a06a901d9011e28a1c1e70cfa4bf25f9d79)
+++ b/src/model.py	(date 1706720857720)
@@ -1,6 +1,7 @@
 from sqlalchemy import Column, String, DateTime, Float, Text, ForeignKey, LargeBinary, text, Integer, Boolean, func
 from src.database import Base
 from sqlalchemy.dialects.mysql import INTEGER, TINYINT, TIMESTAMP
+from sqlalchemy.orm import relationship
 
 
 class BrandSettings(Base):
@@ -14,20 +15,90 @@
     created_time = Column(TIMESTAMP, server_default='CURRENT_TIMESTAMP', onupdate='CURRENT_TIMESTAMP')
 
 
+class Brand(Base):
+    __tablename__ = 'brand'
+
+    id = Column(Integer, primary_key=True, index=True, autoincrement=True)
+    name = Column(String(255), index=True, nullable=False)
+    inactive = Column(Boolean, default=False, nullable=False)
+    created_by = Column(Integer, default=0)
+    created_time = Column(TIMESTAMP, server_default=func.current_timestamp(), nullable=False)
+    updated_by = Column(Integer, default=0)
+    last_updated_at = Column(
+        TIMESTAMP,
+        server_default=func.current_timestamp(),
+        onupdate=func.current_timestamp(),
+        nullable=True
+    )
+
+class Account(Base):
+    __tablename__ = 'account'
+
+    id = Column(Integer, primary_key=True, autoincrement=True)
+    name = Column(String(45), nullable=False)
+    created_time = Column(DateTime, nullable=True)
+    address = Column(String(45), nullable=True)
+    inactive = Column(Boolean, default=False)
+    canEmbedVideos = Column(Boolean, default=False)
+    brandName = Column(Integer, ForeignKey('brand.id'), nullable=True)
+    coach_id = Column(Integer, ForeignKey('user.id'), nullable=True)
+    uniqid = Column(String(255), nullable=True)
+    video_approval = Column(Integer, default=3, comment='1=Required, 2=Preferred, 3=Not Required')
+    approval = Column(Integer, default=3, comment='1=Required, 2=Preferred, 3=Not Required')
+    featured_story = Column(Integer, nullable=True)
+    enable_screencast = Column(String(25), nullable=False, default='BrandAdmin')
+    disable_hide_chat_preference = Column(String(255), nullable=True)
+
+
+class User(Base):
+    __tablename__ = 'user'
+
+    id = Column(INTEGER(11), primary_key=True)
+    username = Column(String(255))
+    title = Column(String(127))
+    firstName = Column(String(255))
+    lastName = Column(String(255))
+    email = Column(String(255), unique=True)
+    secondary_email = Column(String(255))
+    defaultEmail = Column(TINYINT(1), comment='1= email, 2=secondary')
+    password = Column(String(255))
+    image = Column(LargeBinary)
+    account_id = Column(ForeignKey('account.id', ondelete='CASCADE', onupdate='CASCADE'), index=True)
+    last_login_time = Column(DateTime)
+    created_time = Column(DateTime)
+    inactive = Column(TINYINT(1), server_default=text("'0'"))
+    inactive_datetime = Column(DateTime)
+    # language_id = Column(ForeignKey('language.id', ondelete='CASCADE', onupdate='CASCADE'), index=True)
+    signature = Column(Text)
+    coach_id = Column(ForeignKey('user.id'), index=True)
+    secondary_coach_id = Column(ForeignKey('user.id'), index=True)
+    timezone_offset = Column(Float)
+    timezone = Column(INTEGER(11))
+    brand_id = Column(INTEGER(11))
+    terms_accepted_datetime = Column(TIMESTAMP)
+    passwordchanged_time = Column(TIMESTAMP)
+    otp = Column(String(255))
+    thumbnail = Column(String(255))
+    thumbnail = Column(String(255))
+    jwt_access_token = Column(String(255))
+    jwt_refresh_token = Column(String(255))
+    previous_password = Column(Text)
+
+
 class Story(Base):
     __tablename__ = 'story'
 
     id = Column(Integer, primary_key=True, autoincrement=True)
     title = Column(String(255), nullable=True)
-    summary = Column(Text)
-    guide_id = Column(Integer, ForeignKey('video.id', ondelete='SET NULL', onupdate='CASCADE'))
+    summary = Column(Text, nullable=True)
+    # guide_id = Column(Integer, ForeignKey('video.id', ondelete='SET NULL', onupdate='CASCADE'), nullable=True)
     owner_id = Column(Integer, ForeignKey('user.id', ondelete='CASCADE', onupdate='CASCADE'), nullable=False)
     categoryID = Column(Integer, nullable=True)
     inactive = Column(Boolean, nullable=False, default=False)
     created_time = Column(DateTime, nullable=True)
-    background = Column(Text)
-    description = Column(Text)
-    isPrivate = Column(Boolean, nullable=False, default=True)
+    background = Column(Text, nullable=True)
+    description = Column(Text, nullable=True)
+    isPrivate = Column(Boolean, default=True)
     story_type = Column(Integer, default=1, comment='1 = Video, 2 = ScreenShare, 3 = Audio, 4 = Chat')
     approvalpreferred = Column(Boolean, default=False)
     purpose = Column(String(255), nullable=True)
@@ -42,23 +113,12 @@
     compliance = Column(Boolean, nullable=False, default=False, comment='0-No , 1- Yes')
     ai_version = Column(Integer, nullable=True)
     rule_engine = Column(String(255), default='1.0', comment='Default is 1.0 and new is 1.1')
-    coaching = Column(String(255), default='1.0', comment='Default is 1.0')
+    # coaching = Column(String(255), default='1.0', charset='latin1', collation='latin1_swedish_ci')
     user_workbench_version = Column(String(10), nullable=False, default='v1',
                                     comment='Specifies version of user workbench enabled for this story')
-
-
-class Brand(Base):
-    __tablename__ = 'brand'
-
-    id = Column(Integer, primary_key=True, index=True, autoincrement=True)
-    name = Column(String(255), index=True, nullable=False)
-    inactive = Column(Boolean, default=False, nullable=False)
-    created_by = Column(Integer, default=0)
-    created_time = Column(TIMESTAMP, server_default=func.current_timestamp(), nullable=False)
-    updated_by = Column(Integer, default=0)
-    last_updated_at = Column(
-        TIMESTAMP,
-        server_default=func.current_timestamp(),
-        onupdate=func.current_timestamp(),
-        nullable=True
-    )
+    meta_data = Column(Text, nullable=True)
+    created_by = Column(Integer, nullable=True)
+    updated_by = Column(Integer, nullable=True)
+    updated_time = Column(DateTime, nullable=True)
+    brand_id = Column(Integer, ForeignKey('brand.id'), nullable=True)
+    account_id = Column(Integer, ForeignKey('account.id'), nullable=True)
Index: src/assignments/assignment02/assignment02.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/assignments/assignment02/assignment02.py b/src/assignments/assignment02/assignment02.py
new file mode 100644
--- /dev/null	(date 1706789648800)
+++ b/src/assignments/assignment02/assignment02.py	(date 1706789648800)
@@ -0,0 +1,141 @@
+import json
+from typing import Dict, Union, Any
+from fastapi import Depends, HTTPException, APIRouter, Cookie
+from sqlalchemy.orm import Session
+from src.database import get_db
+from src.model import BrandSettings, Story, Brand, Account, User
+from fastapi.responses import JSONResponse
+from pydantic import BaseModel
+
+router = APIRouter()
+
+
+class CreateUserRequest(BaseModel):
+    firstname: str
+    lastname: str
+    email: str
+    primary_coach_mail: str
+    secondary_coach_mail: int
+    account_id: int
+
+
+class UpdateBrandSettings(BaseModel):
+    name: str
+    url: str
+    bucket: str
+
+
+def process_user_data(user_create: CreateUserRequest):
+    processed_user_data = {
+        "username": user_create.firstname + " " + user_create.lastname,
+        "firstName": user_create.firstname,
+        "lastName": user_create.lastname,
+        "email": user_create.email,
+        "secondary_email": user_create.primary_coach_mail,
+        "account_id": user_create.account_id
+    }
+    return processed_user_data
+
+
+def response(Data):
+    return {
+        "success": True,
+        "statusCode": 200,
+        "data": Data
+    }
+
+
+@router.post("/user_id")
+def create_user(data: dict = Depends(process_user_data), db: Session = Depends(get_db)):
+    try:
+        user = User()
+        user.username = data["username"]
+        user.firstname = data["firstName"]
+        user.lastname = data["lastName"]
+        user.email = data["email"]
+        user.secondary_email = data["secondary_email"]
+        user.account_id = data["account_id"]
+        db.add(user)
+        db.commit()
+        db.refresh(user)
+        query = db.query(User.id.label("user_id"), Account.id.label("account_id"), Brand.name.label("brand_name"),
+                         Brand.id.label("brand_id")).filter(Account.id == user.account_id, user.id == user.id) \
+            .join(Brand, Brand.id == Account.brandName).first()
+        query_dict = {
+            "user_id": query.user_id,
+            "brand_id": query.brand_id,
+            "brand_name": query.brand_name,
+            "account_id": query.account_id,
+        }
+        return JSONResponse(status_code=200, content={"message": "User created successfully", "data": query_dict})
+    except Exception as e:
+        return JSONResponse(status_code=400, content={"something went wrong!"})
+
+
+@router.post('/get_story')
+def get_story(user_id: int = Cookie(), db: Session = Depends(get_db)):
+    try:
+        query_results = db.query(User.id.label("user_id"), Account.id.label("account_id"), Brand.id.label("brand_id"),
+                                 Story.id, Story.title) \
+            .filter(User.id == user_id, Story.inactive == 0) \
+            .join(Brand, Story.brand_id == Brand.id) \
+            .join(Account, Brand.id == Account.brandName) \
+            .join(User, Account.id == User.account_id).all()
+
+        result = {"user_id": None, "account_id": None, "brand_id": None, "stories": []}
+
+        for row in query_results:
+            if result["user_id"] is None:
+                result["user_id"] = row.user_id
+                result["account_id"] = row.account_id
+                result["brand_id"] = row.brand_id
+
+            result["stories"].append({"story_id": row.id, "story_title": row.title})
+        return response(result)
+    except:
+        return JSONResponse(status_code=400, content={"message": "something went wrong!"})
+
+
+@router.put('/update_status')
+def update_status(user_ids: str = Cookie(), statuses: str = Cookie(), db: Session = Depends(get_db)):
+    try:
+        user_ids_list = [int(user_id) for user_id in user_ids.split(" ")]
+        status_list = [int(status) for status in statuses.split(" ")]
+
+        for user_id, inactive in zip(user_ids_list, status_list):
+            db.query(User).filter(User.id == user_id).update({"inactive": inactive})
+        db.commit()
+
+        response_data = [
+            {"user_id": user_id, "status": status} for user_id, status in zip(user_ids_list, status_list)
+        ]
+        return response(response_data)
+    except:
+        return JSONResponse(status_code=400, content={"message": "something went wrong!"})
+
+
+@router.post('/user_id')
+def new_entry(data: UpdateBrandSettings, loggedIn_id: int = Cookie(), db: Session = Depends(get_db)):
+    print(loggedIn_id)
+    print("<<<<<<<<<<<<<<")
+    try:
+        query = db.query(User, BrandSettings).filter(User.id == loggedIn_id, BrandSettings.inactive_settings == 0)\
+        .join(Account, User.account_id == Account.id)\
+        .join(Brand, Account.brandName == Brand.id)\
+        .join(BrandSettings, Brand.id == BrandSettings.brand_id).first()
+
+        query_update = db.query(BrandSettings).filter(BrandSettings.id == query.BrandSettings.brand_id)\
+            .update({"inactive_settings": 1})
+        print("<<<<<", query.User.id)
+
+        new = BrandSettings()
+        new.name = data.name
+        new.url = data.url
+        new.bucket = data.bucket
+        db.add(new)
+        db.commit()
+        db.refresh(new)
+
+        print("<<<<<<<<<<<", new.name, new.url, new.bucket)
+    except:
+        return JSONResponse(status_code=400, content={"message": "something went wrong!"})
Index: src/assignments/assignment02/utils.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/assignments/assignment02/utils.py b/src/assignments/assignment02/utils.py
new file mode 100644
--- /dev/null	(date 1706784735044)
+++ b/src/assignments/assignment02/utils.py	(date 1706784735044)
@@ -0,0 +1,108 @@
+import json
+from typing import Dict, Union, Any
+from fastapi import Depends, HTTPException, APIRouter, Cookie
+from sqlalchemy.orm import Session
+from src.database import get_db
+from src.model import BrandSettings, Story, Brand, Account, User
+from fastapi.responses import JSONResponse
+from pydantic import BaseModel
+#
+# router = APIRouter()
+#
+#
+# class CreateUserRequest(BaseModel):
+#     firstname: str
+#     lastname: str
+#     email: str
+#     primary_coach_mail: str
+#     secondary_coach_mail: int
+#     account_id: int
+#
+#
+# def process_user_data(user_create: CreateUserRequest):
+#     processed_user_data = {
+#         "username": user_create.firstname + " " + user_create.lastname,
+#         "firstName": user_create.firstname,
+#         "lastName": user_create.lastname,
+#         "email": user_create.email,
+#         "secondary_email": user_create.primary_coach_mail,
+#         "account_id": user_create.account_id
+#     }
+#     return processed_user_data
+#
+#
+# def response(Data):
+#     return {
+#         "success": True,
+#         "statusCode": 200,
+#         "data": Data
+#     }
+#
+#
+# @router.post("/user_id")
+# def create_user(data: dict = Depends(process_user_data), db: Session = Depends(get_db)):
+#     try:
+#         user = User()
+#         user.username = data["username"]
+#         user.firstname = data["firstName"]
+#         user.lastname = data["lastName"]
+#         user.email = data["email"]
+#         user.secondary_email = data["secondary_email"]
+#         user.account_id = data["account_id"]
+#         db.add(user)
+#         db.commit()
+#         db.refresh(user)
+#         query = db.query(User.id.label("user_id"),Account.id.label("account_id"), Brand.name.label("brand_name"),
+#                          Brand.id.label("brand_id")).filter(Account.id == user.account_id,user.id == user.id) \
+#                         .join(Brand, Brand.id == Account.brandName).first()
+#         query_dict = {
+#             "user_id": query.user_id,
+#             "brand_id": query.brand_id,
+#             "brand_name": query.brand_name,
+#             "account_id": query.account_id,
+#         }
+#         return JSONResponse(status_code=200, content={"message": "User created successfully", "data": query_dict})
+#     except Exception as e:
+#         return JSONResponse(status_code=400, content={"something went wrong!"})
+#
+#
+# @router.post('/get_story')
+# def get_story(user_id: int = Cookie(), db: Session = Depends(get_db)):
+#     try:
+#         query_results = db.query(User.id.label("user_id"), Account.id.label("account_id"), Brand.id.label("brand_id"),
+#                                  Story.id, Story.title) \
+#             .filter(User.id == user_id, Story.inactive == 0) \
+#             .join(Brand, Story.brand_id == Brand.id) \
+#             .join(Account, Brand.id == Account.brandName) \
+#             .join(User, Account.id == User.account_id).all()
+#
+#         result = {"user_id": None, "account_id": None, "brand_id": None, "stories": []}
+#
+#         for row in query_results:
+#             if result["user_id"] is None:
+#                 result["user_id"] = row.user_id
+#                 result["account_id"] = row.account_id
+#                 result["brand_id"] = row.brand_id
+#
+#             result["stories"].append({"story_id": row.id, "story_title": row.title})
+#         return response(result)
+#     except:
+#         return JSONResponse(status_code=400, content={"message": "something went wrong!"})
+#
+#
+# @router.put('/update_status')
+# def update_status(user_ids: str = Cookie(), statuses: str = Cookie(), db: Session = Depends(get_db)):
+#     try:
+#         user_ids_list = [int(user_id) for user_id in user_ids.split(" ")]
+#         status_list = [int(status) for status in statuses.split(" ")]
+#
+#         for user_id, inactive in zip(user_ids_list, status_list):
+#             db.query(User).filter(User.id == user_id).update({"inactive": inactive})
+#         db.commit()
+#
+#         response_data = [
+#             {"user_id": user_id, "status": status} for user_id, status in zip(user_ids_list, status_list)
+#         ]
+#         return response(response_data)
+#     except:
+#         return JSONResponse(status_code=400, content={"message": "something went wrong!"})
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"bfc033fb-4ec3-457c-8c76-d040ac6e33e7\" name=\"Changes\" comment=\"first commit\" />\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Python Script\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 1\n}</component>\n  <component name=\"ProjectId\" id=\"2bcSCtwoe4L4abGZQnOWhZUpZPz\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;git-widget-placeholder&quot;: &quot;main&quot;,\n    &quot;last_opened_file_path&quot;: &quot;/Users/mac/PycharmProjects/fastapi_learning_project&quot;,\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\n  }\n}</component>\n  <component name=\"RecentsManager\">\n    <key name=\"MoveFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/src/assignments/assignment01\" />\n      <recent name=\"$PROJECT_DIR$/src\" />\n    </key>\n  </component>\n  <component name=\"RunManager\">\n    <configuration name=\"main\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\n      <module name=\"task1\" />\n      <option name=\"ENV_FILES\" value=\"\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/src/main.py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n  </component>\n  <component name=\"SharedIndexes\">\n    <attachedChunks>\n      <set>\n        <option value=\"bundled-python-sdk-50da183f06c8-2887949eec09-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-233.13135.95\" />\n      </set>\n    </attachedChunks>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"bfc033fb-4ec3-457c-8c76-d040ac6e33e7\" name=\"Changes\" comment=\"\" />\n      <created>1706512750099</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1706512750099</updated>\n      <workItem from=\"1706512751878\" duration=\"5046000\" />\n      <workItem from=\"1706519918916\" duration=\"23015000\" />\n      <workItem from=\"1706609527526\" duration=\"31000\" />\n      <workItem from=\"1706609569630\" duration=\"463000\" />\n      <workItem from=\"1706610063711\" duration=\"47000\" />\n      <workItem from=\"1706610131190\" duration=\"17000\" />\n      <workItem from=\"1706610162479\" duration=\"320000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"first commit\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1706610406345</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1706610406345</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"2\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"first commit\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"first commit\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 03701a06a901d9011e28a1c1e70cfa4bf25f9d79)
+++ b/.idea/workspace.xml	(date 1706678630632)
@@ -4,7 +4,9 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="bfc033fb-4ec3-457c-8c76-d040ac6e33e7" name="Changes" comment="first commit" />
+    <list default="true" id="bfc033fb-4ec3-457c-8c76-d040ac6e33e7" name="Changes" comment="first commit">
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -95,7 +97,8 @@
       <workItem from="1706609569630" duration="463000" />
       <workItem from="1706610063711" duration="47000" />
       <workItem from="1706610131190" duration="17000" />
-      <workItem from="1706610162479" duration="320000" />
+      <workItem from="1706610162479" duration="2062000" />
+      <workItem from="1706677633334" duration="997000" />
     </task>
     <task id="LOCAL-00001" summary="first commit">
       <option name="closed" value="true" />
@@ -105,7 +108,15 @@
       <option name="project" value="LOCAL" />
       <updated>1706610406345</updated>
     </task>
-    <option name="localTasksCounter" value="2" />
+    <task id="LOCAL-00002" summary="first commit">
+      <option name="closed" value="true" />
+      <created>1706610596724</created>
+      <option name="number" value="00002" />
+      <option name="presentableId" value="LOCAL-00002" />
+      <option name="project" value="LOCAL" />
+      <updated>1706610596724</updated>
+    </task>
+    <option name="localTasksCounter" value="3" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
new file mode 100644
--- /dev/null	(date 1706789756407)
+++ b/.gitignore	(date 1706789756407)
@@ -0,0 +1,1 @@
+.env
\ No newline at end of file
